package logic;

import java.sql.SQLException;

import db.DBWorker;

public class Rubrication {
	
	Rubric[] rubrics;
	DBWorker dbWorker;
	
	public String headingCode(String code) {
		
		String result;
				
		if(code.contains("–†"))
			result = "–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è";
		else if(code.contains("–ö–ù"))
			result = "–ü–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É";
		else if(code.contains("–ö–∞"))
			result = "–û—Å–æ–±–æ–≤–∏–π —Å–∫–ª–∞–¥";
		else if(code.contains("–°—Ç–ó"))
			result = "–ó–∞–æ—á–Ω–∏–∫–∏";
		else if(code.contains("–ê"))
			result = "–ê—Å–ø—ñ—Ä–∞–Ω—Ç—É—Ä–∞";
		else if(code.contains("–ö"))
			result = "–ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è";
		else
			result = "–ù–µ–º–∞ —Ä—É–±—Ä–∏–∫–∏";
		return result;
	}
	
	public String headingName(String name) throws SQLException {
		
		dbWorker = DBWorker.getInstance();
		
		rubrics = Converter.convertDBData(dbWorker.getRurics());
		
		name = name.toLowerCase();
		
		String result = "–ù–µ–º–∞ —Ä—É–±—Ä–∏–∫–∏";
		
		boolean rubricationIsFinished = false;
		
		String[] keyWords;
		
		for(int i = 0; i < rubrics.length; i++){
			if(rubrics[i].getKeyWords().equals("")) {continue;}
			keyWords = rubrics[i].getKeyWords().split(",");
			rubricationIsFinished = name.contains(keyWords[0].toLowerCase());
			for(int j = 0; j < keyWords.length; j++){
				if(rubrics[i].getLogicalSequence() == 1){
					rubricationIsFinished &= name.contains(keyWords[j].toLowerCase());
				}
				else {
					rubricationIsFinished |= name.contains(keyWords[j].toLowerCase());
				}
			}
			if(rubricationIsFinished){
				result = dbWorker.getRubricById(i+1);
				return result;
			}
		}
		return result;
	}
	
	public String folderName(String rubric){
		
		return rubric.toUpperCase();
		
		/*String result;
		
		switch(rubric){
			case "–†–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è":
				result = "—Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è";
				break;
			case "–ü–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É":
				result = "—Ñ–∞–∫—É–ª—å—Ç–µ—Ç";
				break;
			case "–û—Å–æ–±–æ–≤–∏–π —Å–∫–ª–∞–¥":
				result = "—Å–æ–±–æ–≤–∏–π —Å–∫–ª–∞–¥";
				break;
			case "–ó–∞–æ—á–Ω–∏–∫–∏":
				result = "–∑–∞–æ—á–Ω–∏–∫–∏";
				break;
			case "–ê—Å–ø—ñ—Ä–∞–Ω—Ç—É—Ä–∞":
				result = "–∞—Å–ø—ñ—Ä–∞—Ç–Ω—É—Ä–∞";
				break;
			case "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è":
				result = "–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è";
				break;
			case "–?—Å–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂":
				result = "–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∏";
				break;
			case "–ù–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å":
				result = "–Ω–∞—É—á–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å";
				break;
			case "–£—á–µ–Ω—ã–π –°–æ–≤–µ—Ç":
				result = "—É—á–µ–Ω—ã–π —Å–æ–≤–µ—Ç";
				break;
			case "–?–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∏–∫–∞–∑–µ":
				result = "–∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–∏–∫–∞–∑–∞—Ö";
				break;
			default:
				result = null;*/
					
	}
		
}

